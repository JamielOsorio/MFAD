#include <Wire.h>
#include <LiquidCrystal_I2C.h>

//LCD Declarations
LiquidCrystal_I2C lcd(0x26, 16, 2);
LiquidCrystal_I2C lcd2(0x27, 20, 4);

//Analog Pins
int tempSensor = A0;
int lightSensor = A1;
//int pushButton = A2; 
int buzzer = A3;

//Digital Pins
int fanPin = 12;
int heaterPin = 11;
int UVPin = 10;
int startButton = 9;

//Variables
int state = 0;
byte lastButtonState;
byte lastTempRead;
byte lightState;
int count = 1800; //timer: set to 1800 for 30 mins
int countEnd = 0; 
unsigned long prevMillis = 0;
unsigned long currMillis;
const long ndel = 500;
const long ndel3 = 3000;
int a = 0;
int ccount = count;
const float GAMMA = 0.7;
const float RL10 = 50;
const int off_Light = 15;

void setup()
{
  lcd.init();
  lcd.backlight();
  lcd2.init();
  lcd2.backlight();
  lcd.print("Welcome!");
  
  pinMode(fanPin, OUTPUT);
  pinMode(heaterPin, OUTPUT);
  pinMode(UVPin, OUTPUT);
  pinMode(buzzer, OUTPUT);
  pinMode(lightSensor, INPUT);
  pinMode(tempSensor, INPUT);
  pinMode(startButton, INPUT);
  lastButtonState = digitalRead(startButton);
  lastTempRead = degreeC();
  Serial.begin(9600);
}

void loop()
{
  currMillis = millis();
  int lightRead = lightPercent();
  int readingA = degreeC();
  state = digitalRead(startButton);
  digitalWrite(UVPin, HIGH); //delete if UV is on when not pushed
  


  if (readingA < 55){
    digitalWrite(heaterPin, LOW); //low is ON
    //Serial.println("Heater ON");
  } else if (readingA >= 54) {
    stopuh(1000);
    digitalWrite(heaterPin, HIGH); //high is OFF
    //Serial.println("Heater OFF");
  }

    //exhaustfan
  if (readingA < 52){
    digitalWrite(fanPin, HIGH); //low is off
  } else{
    digitalWrite(fanPin, LOW);  //high is ON
  }


  switch (a){
    case 0:
    {
      //if(currMillis - prevMillis >= ndel3){
        stopuh(3000);
        prevMillis = currMillis;
        lcd.clear();
        lcd2.clear();
        noTone(buzzer);
        a=1;
      //}
  	  break;
    }
    case 1:
    {
      lcd.setCursor(0,0);
  	  lcd.print("Facemask     ");//lcd.print("Facemask");
  	  lcd.setCursor(0,1);
  	  lcd.print("Disinfection   ");
      lcd2.setCursor(0,0);
      lcd2.print("State: Idle      ");
      lcd2.setCursor(0,1);
      lcd2.print("Time: 00:00   ");
      stopuh(3000);  // idle interval
      //Serial.print(readingA);   //TEMPERATURE VAR 1
      //Serial.print("|");
      //Serial.print("Not Started");   //COUNTDOWN VAR 2
      //Serial.print("|");
      TLdisplay(lightRead, readingA);  //COUNTDOWN VAR 3

      if (state != lastButtonState){    //!= normally closed button
        if(readingA >= 50 and readingA <= 55){
          lcd.clear();
          lcd2.setCursor(0,0);
          lcd2.print("State: Start");
          
          a=98;
        } else {
          lcd.clear();
          lcd.setCursor(0,0);
          lcd.print("Heater must be");
          lcd.setCursor(0,1);
          lcd.print("50 to 60 deg");
          lcd2.setCursor(0,0);
          lcd2.print("State: Error");
          tone(buzzer, 300);
          a=0;
        }
      } 
      break;
    }
    case 98:
    {
      ccount = count;
      lcd.setCursor(0,0);
      lcd.print("Program Start");
      stopuh(500);
      a=99;
      break;
    }
    case 99:
    {
      if(currMillis - prevMillis >= ndel){
        prevMillis = currMillis;
        lcd2.setCursor(0,1);
        lcd2.print("Time: 00:00");
        digitalWrite(UVPin, LOW);  //originally HIGH     LOW IS OFF dito
        stopuh(1000);
        
        a=100;
      }
      break;
    }
    case 100:
    { 
      digitalWrite(UVPin, LOW);
      //Serial.println("UV");
      if (lightRead <= 50){ 
        //Serial.println("UV OFF");
        lcd.clear();
        lcd.setCursor(0,0);
        lcd.print("UV error");
        lcd.setCursor(0,1);
        lcd.print("cannot start");
        lcd2.setCursor(0,0);
        lcd2.print("State: Error");
        //digitalWrite(UVPin, LOW);
        tone(buzzer,300);
        stopuh(2000);
        noTone(buzzer);
        lcd.clear();
        a=1;
      }
      if (readingA < 55){
        digitalWrite(heaterPin, LOW); //originally HIGH     LOW IS on
        lcd.setCursor(7,1);
        lcd.print("Heat: ON ");
      } else if (readingA >= 52){
        stopuh(1000);
        digitalWrite(heaterPin, HIGH); //originally LOW     HIGH IS off
        digitalWrite(fanPin, HIGH);
        lcd.setCursor(7,1);
        lcd.print("Heat: OFF");
      }
      if (currMillis - prevMillis >= 1000){
        Serial.print((int)readingA);   //TEMPERATURE VAR 1
        Serial.print("| ");
        displayLCD2();
        TLdisplay(lightRead, readingA);
        lcd.setCursor(0,1);
        lcd.print("UV: OK");
        //lcd2.print(ccount-1);
        prevMillis = currMillis;
        ccount--;       
      }
      state = digitalRead(startButton);
      if ((state != lastButtonState)||(ccount==-1)){
        a=101;
      }
      int lightRead = lightPercent();
      break;
      
    }
    case 101:
    {
      digitalWrite(UVPin, HIGH);
      //Serial.print("UV OFF");
      lcd.clear();
      lcd.setCursor(0,0);
      lcd.print("Disinfection");
      lcd.setCursor(0,1);
      lcd.print("Complete");
      tone(buzzer, 300);
      stopuh(3000);
  	  prevMillis = currMillis;
      noTone(buzzer);
      lcd.clear();
      lcd.setCursor(0,0);
      lcd.print("You can now");
      lcd.setCursor(0,1);
      lcd.print("get your mask(s)");
      stopuh(5000);
      lcd.clear();
      a=1;
      break;
    }
  }
}

void stopuh(int del){
  while (currMillis - prevMillis <= del){
    currMillis = millis();
  }
  prevMillis = currMillis;
}

int lightPercent() {
  int light = map(analogRead(A1), 0, 750, 0, 100);
  return static_cast<int>(light);
}

int degreeC(){
  //int celsius = 1.0 / (log((1023.0 / analogRead(tempSensor) - 1.0)) / 4275 + 1.0 / 298.15) - 273.15;
  int reading = analogRead(tempSensor);

  float res = 1023.0/((float)reading)-1;
  res = 100000.0*res;   //res 100000k resistance value
  
  float celsius = 1.0/(log(res/100000.0)/4275+1/298.15)-273.15; //4275 = thermistor value

  return celsius;
}

 void displayLCD2(){
   int countM = ccount/60;
   int countS = ccount%60;
   lcd2.setCursor(0,1);
   lcd2.print("Time:");
   if(countM < 10){
     lcd2.setCursor(6,1);
     lcd2.print("0");
     lcd2.setCursor(7,1);
     lcd2.print(countM);
   }else{
     lcd2.setCursor(6,1);
     lcd2.print(countM);
   }
   lcd2.setCursor(8,1);
   lcd2.print(":");
  
   if(countS < 10){
     lcd2.setCursor(9,1);
     lcd2.print("0");
     lcd2.setCursor(10,1);
     lcd2.print(countS);
     Serial.print(countM);
     Serial.print(":0");
     Serial.print(countS);
     Serial.print("|");
   }else{
     lcd2.setCursor(9,1);
     lcd2.print(countS);
     Serial.print(countM);
     Serial.print(":");
     Serial.print(countS);
     Serial.print("|");
   }
 }

void TLdisplay(int lightRead, int readingA){
  lcd2.setCursor(0,2);
  lcd2.print("Temperature: ");
  lcd2.print(readingA);
  lcd2.print("C  ");
  lcd2.setCursor(0,3);
  lcd2.print("Light:");
  if (lightRead >= off_Light) {
    lcd2.print("ON ");
    Serial.println(" UV ON");

  } else {
    lcd2.print("OFF");
    Serial.println(String(readingA) + "| Not Started" + "| UV OFF"); //in idle
  }
  lcd2.setCursor(10,3);
  lcd2.print("Val:");
  lcd2.print(lightRead);
  lcd2.print("  ");
}
